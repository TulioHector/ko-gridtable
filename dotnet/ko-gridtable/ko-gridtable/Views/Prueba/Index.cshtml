@model dynamic

@{
    ViewBag.Title = "title";
}

@*<div class='liveExample' id="prueba">
    <div data-bind='simpleGrid: gridViewModel'> </div>
    <button data-bind='click: addItem'>
        Add item
    </button>
    <button data-bind='click: sortByName'>
        Sort by name
    </button>
    <button data-bind='click: jumpToFirstPage, enable: gridViewModel.currentPageIndex'>
        Jump to first page
    </button>
</div>

<div class='liveExample' id="prueba2">
    <div data-bind='simpleGrid: gridViewModel'> </div>
    <button data-bind='click: addItem'>
        Add item
    </button>
    <button data-bind='click: sortByName'>
        Sort by name
    </button>
    <button data-bind='click: jumpToFirstPage, enable: gridViewModel.currentPageIndex'>
        Jump to first page
    </button>
</div>*@

@section scripts
{
    @*<script type="text/javascript">
        $(function () {
            

            var initialData2 = [
    { name: "Tulio-Travelled Kitten", sales: 352, price: 75.95 },
    { name: "Hectory Coyote", sales: 89, price: 190.00 },
    { name: "Abraham Lizard", sales: 152, price: 25.00 },
    { name: "Romano Monkey", sales: 1, price: 99.95 },
    { name: "Brooding Dragon", sales: 0, price: 6350 },
    { name: "Ingenious Tadpole", sales: 39450, price: 0.35 },
    { name: "Optimistic Snail", sales: 420, price: 1.50 }
            ];

            var PagedGridModel = function (items) {
                var initialData = [
    { name: "Well-Travelled Kitten", sales: 352, price: 75.95 },
    { name: "Speedy Coyote", sales: 89, price: 190.00 },
    { name: "Furious Lizard", sales: 152, price: 25.00 },
    { name: "Indifferent Monkey", sales: 1, price: 99.95 },
    { name: "Brooding Dragon", sales: 0, price: 6350 },
    { name: "Ingenious Tadpole", sales: 39450, price: 0.35 },
    { name: "Optimistic Snail", sales: 420, price: 1.50 }
                ];
                this.items = ko.observableArray(initialData);

                this.addItem = function () {
                    this.items.push({ name: "New item", sales: 0, price: 100 });
                };

                this.sortByName = function () {
                    this.items.sort(function (a, b) {
                        return a.name < b.name ? -1 : 1;
                    });
                };

                this.jumpToFirstPage = function () {
                    this.gridViewModel.currentPageIndex(0);
                };

                this.gridViewModel = new ko.simpleGrid.viewModel({
                    data: this.items,
                    columns: [
                        { headerText: "Item Name", rowText: "name" },
                        { headerText: "Sales Count", rowText: "sales" },
                        { headerText: "Price", rowText: function (item) { return "$" + item.price.toFixed(2) } }
                    ],
                    pageSize: 4
                });
            };

            ko.applyBindings(new PagedGridModel(), document.getElementById("prueba"));
            ko.applyBindings(new PagedGridModel(initialData2), document.getElementById("prueba2"));
        });

        (function () {
            // Private function
            function getColumnsForScaffolding(data) {
                if ((typeof data.length !== 'number') || data.length === 0) {
                    return [];
                }
                var columns = [];
                for (var propertyName in data[0]) {
                    columns.push({ headerText: propertyName, rowText: propertyName });
                }
                return columns;
            }

            ko.simpleGrid = {
                // Defines a view model class you can use to populate a grid
                viewModel: function (configuration) {
                    this.data = configuration.data;
                    this.currentPageIndex = ko.observable(0);
                    this.pageSize = configuration.pageSize || 5;

                    // If you don't specify columns configuration, we'll use scaffolding
                    this.columns = configuration.columns || getColumnsForScaffolding(ko.unwrap(this.data));

                    this.itemsOnCurrentPage = ko.computed(function () {
                        var startIndex = this.pageSize * this.currentPageIndex();
                        return ko.unwrap(this.data).slice(startIndex, startIndex + this.pageSize);
                    }, this);

                    this.maxPageIndex = ko.computed(function () {
                        return Math.ceil(ko.unwrap(this.data).length / this.pageSize) - 1;
                    }, this);
                }
            };

            // Templates used to render the grid
            var templateEngine = new ko.nativeTemplateEngine();

            templateEngine.addTemplate = function (templateName, templateMarkup) {
                document.write("<script type='text/html' id='" + templateName + "'>" + templateMarkup + "<" + "/script>");
            };

            templateEngine.addTemplate("ko_simpleGrid_grid", "\
                    <table class=\"ko-grid\" cellspacing=\"0\">\
                        <thead>\
                            <tr data-bind=\"foreach: columns\">\
                               <th data-bind=\"text: headerText\"></th>\
                            </tr>\
                        </thead>\
                        <tbody data-bind=\"foreach: itemsOnCurrentPage\">\
                           <tr data-bind=\"foreach: $parent.columns\">\
                               <td data-bind=\"text: typeof rowText == 'function' ? rowText($parent) : $parent[rowText] \"></td>\
                            </tr>\
                        </tbody>\
                    </table>");
            templateEngine.addTemplate("ko_simpleGrid_pageLinks", "\
                    <div class=\"ko-grid-pageLinks\">\
                        <span>Page:</span>\
                        <!-- ko foreach: ko.utils.range(0, maxPageIndex) -->\
                               <a href=\"#\" data-bind=\"text: $data + 1, click: function() { $root.currentPageIndex($data) }, css: { selected: $data == $root.currentPageIndex() }\">\
                            </a>\
                        <!-- /ko -->\
                    </div>");

            // The "simpleGrid" binding
            ko.bindingHandlers.simpleGrid = {
                init: function () {
                    return { 'controlsDescendantBindings': true };
                },
                // This method is called to initialize the node, and will also be called again if you change what the grid is bound to
                update: function (element, viewModelAccessor, allBindings) {
                    var viewModel = viewModelAccessor();

                    // Empty the element
                    while (element.firstChild)
                        ko.removeNode(element.firstChild);

                    // Allow the default templates to be overridden
                    var gridTemplateName = allBindings.get('simpleGridTemplate') || "ko_simpleGrid_grid",
                        pageLinksTemplateName = allBindings.get('simpleGridPagerTemplate') || "ko_simpleGrid_pageLinks";

                    // Render the main grid
                    var gridContainer = element.appendChild(document.createElement("DIV"));
                    ko.renderTemplate(gridTemplateName, viewModel, { templateEngine: templateEngine }, gridContainer, "replaceNode");

                    // Render the page links
                    var pageLinksContainer = element.appendChild(document.createElement("DIV"));
                    ko.renderTemplate(pageLinksTemplateName, viewModel, { templateEngine: templateEngine }, pageLinksContainer, "replaceNode");
                }
            };
        })();
</script>*@
    <script type="text/javascript">
        $(function() {
            var vm = new KoGridTable({
                Id: "grid1",
                Url: "/api/Data",
                UrlEdit: "api/Data",
                UrlAddItem: "/api/Data",
                UrlDeleteItem: "api/Data",
                Columns: [
                    { Name: 'Name', Type: 'text' },
                    { Name: 'LastName', Type: 'text' },
                    { Name: 'Email', Type: 'text' },
                    { Name: 'Id', Type: 'number', Hidden: true },
                    { Name: 'Activo', Type: 'checkbox' },
                    //{ Name: 'Sexo', Type: 'select', DataSourceUrl: '/api/ComboBox', DataText: 'Description', DataValue: 'Id', OptionsCaption: 'Elegir' },
                    { Name: 'Actions', Type: 'html', CustomColumn: true, EnableAbm: true }
                ],
                EnableEditInline: true,
                Pagings: { SelectorRang: "10-5", SelectorName: "Number of items per page:", Enable: true, NamePages: "Page: ", NameTotalCount: "Total: ", NameTotalPages: "De: " }
            });

            ko.applyBindings(vm, $("#grid1")[0]);
        });
    </script>
}
<div id="grid1">
    <table class="table table-hover table-condensed" id="gridSample">
        <thead data-bind="template: {name: templateHeader} ">
        </thead>
        <tbody data-bind="template: { name: templateToUse, foreach: currentPage}"></tbody>
        <tfoot data-bind="template: {name: templateFoot} ">

        </tfoot>
    </table>
    <div class="pull-left">
        <button data-bind="click: add" type="button" class="btn btn-default addrow">
            <span class="fa fa-plus-square"></span>
        </button>
    </div>
</div>